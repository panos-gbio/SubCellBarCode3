dev.off() # close PDF device and save file
dev.off() # close PDF device and save file
γψ()
gc()
# The MS data should be log transformed, mean subtracted across the TMT-channels
# and median centered, as stated in nature protocols (Arslan et. al. 2022).
# We will use the same examples used from Bioconductor package in duplicates and
# triplicates.
library(SubCellBarCode)
library(tidyverse)
# paths
processed_path <- paste0(getwd(), "/data/processed/")
util_path <- paste0(getwd(), "/util/")
figs_path <- paste0(getwd(), "/figs/")
# list.files(util_path)
# helper functions
source(paste0(util_path,"markerQualityControl3.R")) # markerprotein analysis for triplicates
# The data is hcc927ctrl from the SCBC data and triplicates generated from script #1
df2 <- loadData(protein.data = hcc827Ctrl)
df3 <- read.csv(paste0(processed_path,"triplicates.csv"), header = TRUE) %>%
column_to_rownames("X")
set.seed(2)
dfr2 <- df2[sample(nrow(df2), 6000),]
dfr3 <- df3[sample(nrow(df3), 6000),]
## ------- Step 1. Covered Marker Proteins ---------------
# A calculation of the percentage coverage of the Markerproteins in the specific experiment using
# the 5 CL as reference
c.prots2 <- SubCellBarCode::calculateCoveredProtein(rownames(dfr2), markerproteins = markerProteins[,1])
c.prots3 <- SubCellBarCode::calculateCoveredProtein(rownames(dfr3), markerproteins = markerProteins[,1])
## ------- Step 2. MarkerProtein QC ---------------
# For the triplicates, we can find the results of the analysis in the figure section of this repository
# We need to provide a path to save the figures, it is a new argument
r.markers2 <- SubCellBarCode::markerQualityControl(coveredProteins = c.prots2, protein.data = dfr2)
r.markers3 <- markerQualityControl3(coveredProteins = c.prots3, protein.data = dfr3,
figure_path = figs_path)
# helper functions
source(paste0(util_path,"markerQualityControl3.R")) # markerprotein analysis for triplicates
list.files(util_path)
source(paste0(util_path,"tsneVisualization3.R")) # tsne for triplicates including pdf results
## ------ Step 3 tSNE coordinates and Visualization -----
windows()
tsne.map2 <- SubCellBarCode::tsneVisualization(protein.data = dfr_t,
markerProteins = r.markers_t,
dims = 3,
theta = c(0.01),
perplexity = c(60))
source(paste0(util_path,"tsneVisualization3.R")) # tsne for triplicates including pdf results
tsne.map3 <- tsneVisualization3(protein.data = dfr3,
markerProteins = r.markers3,
dims = 3,
theta = c(0.01),
perplexity = c(60),
figure_path = figs_path)
source(paste0(util_path,"tsneVisualization3.R")) # tsne for triplicates including pdf results
# the triplicate version
tsne.map3 <- tsneVisualization3(protein.data = dfr3,
markerProteins = r.markers3,
dims = 3,
theta = c(0.01),
perplexity = c(60),
figure_path = figs_path)
tsne.map3
###  -------- Step 4.1 Build model and estimate thresholds  ----------
set.seed(4)
cls <- SubCellBarCode::svmClassification(markerProteins = r.markers2,
protein.data = dfr2,
markerprot.df = markerProteins)
cls
cls
View(cls)
cls[[1]]
cls[[1]]$model
cls[[1]]$svm.test.prob.out
test2.A <- cls[[1]]$svm.test.prob.out
test2.B <- cls[[2]]$svm.test.prob.out
head(test2.A)
library(SubCellBarCode)
library(caret)
library(e1071)
library(stats)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
dfr3
r.markers3
markerprot.df
markerprot.df <- markerProteins
markerProteins <- r.markers3
protein.data <- dfr3
markerprot.df <- markerProteins
prot.df <- protein.data[markerProteins, ]
prot.df
marker.df <- markerprot.df[markerProteins, ]
markerprot.df <- markerProteins
markerprot.df
library(SubCellBarCode)
SubCellBarCode::markerProteins
markerprot.df <- SubCellBarCode::markerProteins
markerprot.df
marker.df <- markerprot.df[markerProteins, ]
marker.df
# data from experiment and ground truth from marker proteins. Subset with those after quality control, r.markers
subcell.loc.data <- cbind(prot.df, marker.df[seq_len(2)])
subcell.loc.data
#splitting the data randomly fron caret function
label.train <- caret::createDataPartition(subcell.loc.data$Compartments,
times = 1,
p=0.7,
list = FALSE)
df.train <- subcell.loc.data[label.train, ]
df.test <- subcell.loc.data[-label.train, ]
df.train
# Build classifier for  replicate A, B, and C respectively.
# Choose replicate name and use it as a placeholder for selecting columns in the second function
build.classifier <- lapply(c("A", "B", "C"), function(x) {
rep.train.df <- df.train[, grepl(sprintf("\\.%s\\.", x),
colnames(df.train))]
replicate.train.label <- df.train$Compartments
# search for character %s, which is a placeholder for x
rep.test.df <- df.test[, grepl(sprintf("\\.%s\\.", x),
colnames(df.test))]
replicate.test.label <- df.test$Compartments
# tune the best parameters, the model uses factors as labels
svm.tune <- e1071::tune(svm,
train.x = rep.train.df,
train.y = factor(replicate.train.label),
kernel="radial",
ranges=list(cost = 10^(seq_len(4) - 2),
gamma = c(.5, 1, 1.5, 2)))
# build the svm model
model.svm <- e1071::svm(factor(replicate.train.label) ~ .,
data = rep.train.df,
probability=TRUE,
kernel="radial",
cost=svm.tune$best.parameters[1],
gamma=svm.tune$best.parameters[2],
scale = FALSE,
cross=10)
# predict and test on test data, we also extract the propabilities since the models tries to predict the cluster for each protein
svm.pred <- predict(model.svm, rep.test.df, probability = TRUE)
svm.pred.test.df <- data.frame(svm.pred)
svm.test.prob <- data.frame(attr(svm.pred, "probabilities"))
test.observation <- data.frame(df.test$Compartments)
svm.test.prob.out <- cbind(test.observation,
svm.pred.test.df,
svm.test.prob)
colnames(svm.test.prob.out)[1] <- 'Observation'
svm.test.prob.out <- svm.test.prob.out[,
c("Observation", "svm.pred", "S1", "S2",
"S3", "S4", "N1", "N2", "N3", "N4", "C1",
"C2", "C3", "C4", "C5", "M1", "M2")]
if(sum(svm.test.prob.out$Observation ==
svm.test.prob.out$svm.pred) / nrow(df.test) < 0.50){
cat("Overall prediction accuracy is < % 50.
Downstream analysis will not be accurate enough.
We highly recommend you to perform wet-lab analyis
again.")
}
# predict all proteins after evaluating the model with the test set. We use the tuned model.svm
all.prot.df <- protein.data[,grepl(sprintf("\\.%s\\.", x),
colnames(df.train))]
svm.pred.all <- predict(model.svm,
all.prot.df,
probability = TRUE)
svm.all.label <- data.frame(svm.pred.all)
svm.all.prob <- data.frame(attr(svm.pred.all, "probabilities"))
all.prot.pred <- cbind(svm.all.label, svm.all.prob)
all.prot.pred <- all.prot.pred[,c("svm.pred.all", "S1", "S2",
"S3", "S4", "N1", "N2", "N3", "N4", "C1",
"C2", "C3", "C4", "C5", "M1", "M2")]
message("Extracting model ", paste0(x))
# merge both test predicitions and all protein predictions
all.classifications <- list(svm.test.prob.out=svm.test.prob.out,
all.prot.pred = all.prot.pred,
model = model.svm)
return(all.classifications)
})
all.classifications
View(build.classifier)
View(build.classifier)
View(build.classifier)
View(build.classifier)
df.test
svm.pred
list.files(util_path)
source(paste0(util_path,"svmClassification3.R"))
cls3 <- svmClassification3(markerProteins = r.markers3,
protein.data = dfr3,
markerprot.df = SubCellBarCode::markerProteins)
head(test2.A)
# extract the compartment probabilities of the test set
test3.A <- cls[[1]]$svm.test.prob.out
test3.B <- cls[[2]]$svm.test.prob.out
test3.C <- cls[[3]]$svm.test.prob.out
# extract the compartment probabilities of the test set
test3.A <- cls3[[1]]$svm.test.prob.out
test3.B <- cls3[[2]]$svm.test.prob.out
test3.C <- cls3[[3]]$svm.test.prob.out
head(test3.A)
dfr3
dfr2
all2.A <- cls[[1]]$svm.all.prob.out
all2.B <- cls[[2]]$svm.all.prob.out
all2.B
all2.A
cls
View(cls)
all2.A <- cls[[1]]$svm.all.prot.pred
all2.B <- cls[[2]]$svm.all.prot.pred
all2.B
all2.A <- cls[[1]]$all.prot.pred
all2.B <- cls[[2]]$all.prot.pred
all2.B
# extract whole data probabilities
all3.A <- cls3[[1]]$all.prot.pred
all3.B <- cls3[[2]]$all.prot.pred
all3.C <- cls3[[3]]$all.prot.pred
all3.C
# estimate compartment classification thresholds
t.c.df2 <- SubCellBarCode::computeThresholdCompartment(test.repA = test.A, test.repB = test.B)
# estimate compartment classification thresholds
t.c.df2 <- SubCellBarCode::computeThresholdCompartment(test.repA = test2.A, test.repB = test2.B)
t.c.df2
list.files(util_path)
source(paste0(util_path,"computeThresholdCompartment3.R"))
source(paste0(util_path,"computeThresholdCompartment3.R"))
test3.A
# estimate compartment classification thresholds
t.c.df3 <- computeThresholdCompartment3(test.repA = test3.A,
test.repB = test3.B,
test.repC = test3.C)
t.c.df3
# estimate compartment classification thresholds
t.c.df2 <- SubCellBarCode::computeThresholdCompartment(test.repA = test2.A, test.repB = test2.B)
t.c.df2
t.c.df3
list.files(util_path)
source(paste0(util_path,"applyThresholdCompartment3.R"))
# duplicates
c.cls.df2 <- SubCellBarCode::applyThresholdCompartment(all.repA = all2.A, all.repB = all2.B,
threshold.df = t.c.df2)
c.cls.df2
table(c.cls.df2$svm.pred)
t.c.df2
# for some reasonn C4 has NA as a threshold, so I might add the value myself and see differences
t.c.df2_man <- t.c.df2
t.c.df2_man
t.c.df2_man["C4","OptedThreshold"]
t.c.df2_man["C4","OptedThreshold"] <- 0.515
t.c.df2_man
# for some reasonn C4 has NA as a threshold, so I might add the value myself and see differences
t.c.df2_man <- t.c.df2
t.c.df2_man["C4","OptedThreshold"]
t.c.df2_man["Compartment"]
t.c.df2_man["Compartment"] == "C4"
t.c.df2_man[t.c.df2_man["Compartment"] == "C4","OptedThreshold"]
t.c.df2_man[t.c.df2_man["Compartment"] == "C4","OptedThreshold"] <- 0.515
t.c.df2_man
c.cls.df2.man <- SubCellBarCode::applyThresholdCompartment(all.repA = all2.A, all.repB = all2.B,
threshold.df = t.c.df2_man)
table(c.cls.df2.man$svm.pred)
c.cls.df2.man
table(c.cls.df2.man$svm.pred)
t.c.df2_man
table(c.cls.df2$svm.pred)
table(c.cls.df2_man$svm.pred)
c.cls.df2_man <- SubCellBarCode::applyThresholdCompartment(all.repA = all2.A, all.repB = all2.B,
threshold.df = t.c.df2_man)
table(c.cls.df2_man$svm.pred)
t.c.df3
# triplicates
c.cls.df3 <- applyThresholdCompartment3(all.repA = all3.A, all.repB = all3.B,
all.repC = all3.C,
threshold.df = t.c.df3)
c.cls.df3
table(c.cls.df3$svm.pred)
c.cls.df2
table(c.cls.df2$svm.pred)
table(c.cls.df3$svm.pred)
# duplicates
t.n.df2 <- computeThresholdNeighborhood(test.repA = test2.A, test.repB = test2.B)
t.n.df2
# duplicates
t.n.df2 <- SubCellBarCode::computeThresholdNeighborhood(test.repA = test2.A, test.repB = test2.B)
list.files(util_path)
source(paste0(util_path,"computeThresholdNeighborhood3.R"))
# triplicates
t.n.df3 <- computeThresholdNeighborhood3(test.repA = test3.A,
test.repB = test3.B,
test.repC = test3.C)
t.n.df3
t.n.df2
list.files(util_path)
source(paste0(util_path,"applyThresholdCompartment3.R"))
source(paste0(util_path,"applyThresholdNeighborhood3.R"))
t.n.df3
t.n.df2
# duplicates
n.cls.df <- applyThresholdNeighborhood(all.repA = all2.A, all.repB = all2.B,
threshold.df = t.n.df2)
n.cls.df
# duplicates
n.cls.df <- SubCellBarCode::applyThresholdNeighborhood(all.repA = all2.A, all.repB = all2.B,
threshold.df = t.n.df2)
source(paste0(util_path,"applyThresholdNeighborhood3.R"))
source(paste0(util_path,"applyThresholdNeighborhood3.R"))
# duplicates
n.cls.df2 <- SubCellBarCode::applyThresholdNeighborhood(all.repA = all2.A, all.repB = all2.B,
threshold.df = t.n.df2)
table(n.cls.df2$svm.pred.all)
n.cls.df3 <- applyThresholdNeighborhood3(all.repA = all3.A,
all.repB = all3.B,
all.repC = all3.C,
threshold.df = t.n.df2)
n.cls.df3
table(n.cls.df3$svm.pred.all)
table(n.cls.df2$svm.pred.all)
source(paste0(util_path,"applyThresholdNeighborhood3.R"))
n.cls.df4 <- applyThresholdNeighborhood3(all.repA = all3.A,
all.repB = all3.B,
all.repC = all3.C,
threshold.df = t.n.df2)
table(n.cls.df4$svm.pred.all)
n.cls.df3
table(n.cls.df3$svm.pred.all)
n.cls.df3 <- applyThresholdNeighborhood3(all.repA = all3.A,
all.repB = all3.B,
all.repC = all3.C,
threshold.df = t.n.df2)
table(n.cls.df3$svm.pred.all)
cls.df
cls.df2 <- SubCellBarCode::mergeCls(compartmentCls = c.cls.df2, neighborhoodCls = n.cls.df2)
cls.df2
# triplicates
cls.df3 <- SubCellBarCode::mergeCls(compartmentCls = c.cls.df3, neighborhoodCls = n.cls.df3)
cls.df3
all.repA
t.n.df2
t.n.df3
n.cls.df3 <- applyThresholdNeighborhood3(all.repA = all3.A,
all.repB = all3.B,
all.repC = all3.C,
threshold.df = t.n.df3)
n.cls.df3
table(n.cls.df3$svm.pred.all)
table(n.cls.df2$svm.pred.all)
all.repA <- all3.A
all.repB <- all3.B
all.repC <- all3.C
threshold.df <-
applyThresholdNeighborhood3 <- function(all.repA, all.repB, all.repC, threshold.df){
#upgrade compartment labels to neighborhood labels for prediction
all.n.repA <- SubCellBarCode::replacePrediction(df = all.repA,
column = "svm.pred.all")
all.n.repB <- SubCellBarCode::replacePrediction(df = all.repB,
column = "svm.pred.all")
all.n.repC <- SubCellBarCode::replacePrediction(df = all.repC,
column = "svm.pred.all")
#sum up compartment level predictions to neighborhood predictions
m.all.repA <- SubCellBarCode::mergeProbability(all.n.repA)
m.all.repB <- SubCellBarCode::mergeProbability(all.n.repB)
m.all.repC <- SubCellBarCode::mergeProbability(all.n.repC)
m.all.repB <- m.all.repB[rownames(m.all.repA), ]
m.all.repC <- m.all.repC[rownames(m.all.repA), ]
#merge the replicates by averaging the probabilities, the unclassified list
all.repAB.mean <- rbind(m.all.repA, m.all.repB, m.all.repC)[,-2]
all.repAB.mean <- aggregate(.~Proteins, data = all.repAB.mean, mean)
all.repAB <- data.frame(Proteins = all.repAB.mean$Proteins,
svm.pred.all = rep("Unclassified", nrow(all.repAB.mean)),
all.repAB.mean[,2:5])
rownames(all.repAB) <- all.repAB$Proteins
all.repAB <- all.repAB[rownames(m.all.repA), ]
# common neighborhood prediction across all replicates
common_pred <-cbind(m.all.repA$svm.pred.all, m.all.repB$svm.pred.all, m.all.repC$svm.pred.all)
common_bool <- apply(common_pred, 1, function(r){all(r==r[1])})
# merge all replicates and average them
n.repA.m <- m.all.repA[common_bool, ]
n.repB.m <- m.all.repB[common_bool, ]
n.repC.m <- m.all.repC[common_bool, ]
## Comparison with old method and sanity check
# n.repA.m2 <- m.all.repA[m.all.repA$svm.pred.all == m.all.repB$svm.pred.all, ]
# n.repB.m2 <- m.all.repB[m.all.repB$svm.pred.all == m.all.repB$svm.pred.all, ]
# identical(n.repA.m2,n.repA.m)
combined.reps <- rbind(n.repA.m, n.repB.m, n.repC.m)
combined.df <- data.frame(Proteins = combined.reps$Proteins,
combined.reps[, 3:6])
averaged.reps <- aggregate(.~Proteins, data = combined.df, mean)
rownames(averaged.reps) <- averaged.reps$Proteins
averaged.reps <- averaged.reps[rownames(n.repA.m), ]
combined.rep.A.B <- data.frame(Proteins = averaged.reps$Proteins,
svm.pred.all = n.repA.m$svm.pred.all,
averaged.reps[, 2:5])
#apply the thresholds for each neighborhood, generated from calculate threshold function
neighborhoods <- c("Secretory","Nuclear", "Cytosol", "Mitochondria")
confident.classification <- lapply(neighborhoods, function(m){
# temp precision
t.p <- unname(unlist(threshold.df[threshold.df$Neighborhood == m, ][2]))
#temp recall
t.r <- unname(unlist(threshold.df[threshold.df$Neighborhood == m, ][3]))
t.value <- max(t.p, t.r)
if (is.numeric(t.p)){
temp.df <- combined.rep.A.B[combined.rep.A.B$svm.pred.all == m, ]
up.threshold.df <- temp.df[temp.df[m] >= t.value, ]
}
})
conf.df <- do.call("rbind", confident.classification)
##adding "unclassified proteins"
no.class <- subset(all.repAB, ! rownames(all.repAB) %in% rownames(conf.df))
n.cls.df <- rbind(conf.df, no.class)
}
threshold.df <- t.n.df3
t.n.df3
#upgrade compartment labels to neighborhood labels for prediction
all.n.repA <- SubCellBarCode::replacePrediction(df = all.repA,
column = "svm.pred.all")
all.n.repA
all.n.repB <- SubCellBarCode::replacePrediction(df = all.repB,
column = "svm.pred.all")
all.n.repB
all.n.repC <- SubCellBarCode::replacePrediction(df = all.repC,
column = "svm.pred.all")
#sum up compartment level predictions to neighborhood predictions
m.all.repA <- SubCellBarCode::mergeProbability(all.n.repA)
m.all.repB <- SubCellBarCode::mergeProbability(all.n.repB)
m.all.repC <- SubCellBarCode::mergeProbability(all.n.repC)
m.all.repC
rownames(m.all.repA)
m.all.repB <- m.all.repB[rownames(m.all.repA), ]
m.all.repC <- m.all.repC[rownames(m.all.repA), ]
View(m.all.repB)
View(m.all.repA)
View(m.all.repC)
View(m.all.repA)
#merge the replicates by averaging the probabilities, the unclassified list
all.repAB.mean <- rbind(m.all.repA, m.all.repB, m.all.repC)[,-2]
all.repAB.mean
View(all.repAB.mean)
m.all.repB
is.duplicated(all.repAB.mean)
duplicated(rownames(all.repAB.mean))
duplicated(rownames(all.repAB.mean))[1]
duplicated(rownames(all.repAB.mean))[6001]
duplicated(rownames(all.repAB.mean))[6002]
duplicated(rownames(all.repAB.mean))[9000]
(all.repAB.mean)
rownames(all.repAB.mean)
duplicated(rownames(all.repAB.mean))
View(all.repAB.mean)
sum(duplicated(rownames(all.repAB.mean))
# common neighborhood prediction across all replicates
common_pred <-cbind(m.all.repA$svm.pred.all, m.all.repB$svm.pred.all, m.all.repC$svm.pred.all)
sum(duplicated(rownames(all.repAB.mean)
# aggregate the measurement per how many protein (same gene) are repeated in the df
all.repAB.mean <- aggregate(.~Proteins, data = all.repAB.mean, mean)
all.repAB.mean
# aggregate the measurement per how many protein (same gene) are repeated in the df
all.repAB.mean <- aggregate(.~Proteins, data = all.repAB.mean, mean)
all.repAB.mean
all.repAB
all.repAB <- data.frame(Proteins = all.repAB.mean$Proteins,
svm.pred.all = rep("Unclassified", nrow(all.repAB.mean)),
all.repAB.mean[,2:5])
all.repAB
rownames(all.repAB) <- all.repAB$Proteins
all.repAB <- all.repAB[rownames(m.all.repA), ]
common_pred <-cbind(m.all.repA$svm.pred.all, m.all.repB$svm.pred.all, m.all.repC$svm.pred.all)
common_pred
common_bool
common_bool <- apply(common_pred, 1, function(r){all(r==r[1])})
common_bool
common_pred[146]
common_pred[145]
common_pred
# merge all replicates and average them
n.repA.m <- m.all.repA[common_bool, ]
n.repB.m <- m.all.repB[common_bool, ]
n.repC.m <- m.all.repC[common_bool, ]
n.repC.m
n.repC.m
n.repB.m
combined.reps <- rbind(n.repA.m, n.repB.m, n.repC.m)
combined.df <- data.frame(Proteins = combined.reps$Proteins,
combined.reps[, 3:6])
averaged.reps <- aggregate(.~Proteins, data = combined.df, mean)
averaged.reps
averaged.reps <- aggregate(.~Proteins, data = combined.df, mean)
rownames(averaged.reps) <- averaged.reps$Proteins
averaged.reps <- averaged.reps[rownames(n.repA.m), ]
combined.rep.A.B <- data.frame(Proteins = averaged.reps$Proteins,
svm.pred.all = n.repA.m$svm.pred.all,
averaged.reps[, 2:5])
#apply the thresholds for each neighborhood, generated from calculate threshold function
neighborhoods <- c("Secretory","Nuclear", "Cytosol", "Mitochondria")
confident.classification <- lapply(neighborhoods, function(m){
# temp precision
t.p <- unname(unlist(threshold.df[threshold.df$Neighborhood == m, ][2]))
#temp recall
t.r <- unname(unlist(threshold.df[threshold.df$Neighborhood == m, ][3]))
t.value <- max(t.p, t.r)
if (is.numeric(t.p)){
temp.df <- combined.rep.A.B[combined.rep.A.B$svm.pred.all == m, ]
up.threshold.df <- temp.df[temp.df[m] >= t.value, ]
}
})
conf.df <- do.call("rbind", confident.classification)
conf.df
conf.df <- do.call("rbind", confident.classification)
conf.df
##adding "unclassified proteins"
no.class <- subset(all.repAB, ! rownames(all.repAB) %in% rownames(conf.df))
no.class
n.cls.df <- rbind(conf.df, no.class)
